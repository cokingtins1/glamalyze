// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id    String @id @default(uuid())
  user_email String @unique
  user_name  String
}

model Retailer {
  retailer_id String @id @default(uuid())

  Review Review[]
}

model Query {
  query_id   String   @id @default(uuid())
  created_at DateTime @default(now())
  //retailer_data
}

model Product {
  product_id        String           @id
  product_name      String
  brand_id          String
  brand_name        String
  product_image_url String
  retailer_id       String[]
  UltaProducts      UltaProduct[]
  SephoraProducts   SephoraProduct[]
  Review            Review[]
}

model UltaProduct {
  product_id          String  @id
  product             Product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  product_name        String?
  brand_name          String?
  price               Int?
  total_reviews       Int?
  avg_rating          Float?
  percent_recommended Int?
  review_histogram    Int[]
  sku_id              String?
}

model SephoraProduct {
  product_id          String  @id
  product             Product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  product_name        String?
  brand_name          String?
  price               Int?
  total_reviews       Int?
  avg_rating          Float?
  percent_recommended Int?
  review_histogram    Int[]
  sku_id              String?
}

model Review {
  review_id       String   @id @default(uuid())
  product_id      String
  product         Product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  retailer_id     String
  retailer        Retailer @relation(fields: [retailer_id], references: [retailer_id], onDelete: Cascade)
  review_headline String?
  review_text     String?
  review_rating   Int?
  review_date     String?
  reviewer_name   String?
  reviewer_id     String
  reviewer        Reviewer @relation(fields: [reviewer_id], references: [reviewer_id])
  verified_buyer  Boolean?
  up_votes        Int?
  down_votes      Int?
}

model Reviewer {
  reviewer_id String   @id @default(uuid())
  Review      Review[]
}

// User Table
// PK === user_id, user_email, user_name

// Query Table
// PK === query_id, created_at, retailer_data (JSON of ulta and sephora data)

// Products Table
// PK === product_id, product_name, brand_id, brand_name, image, retailer_id['ulta_id?, sephora_id?,...']

// Ulta Products Table
// PK/FK === product_id, price, reviews, avg_rating, recommended_%, 

// Sephora Products Table
// PK/FK === product_id, price, reviews, avg_rating, recommended_%, 

// Reviews Table
//PK/FK === product_id -> Product, retailer_id (sephora/ulta) === FK,  review ... rating ... review_date ...  
