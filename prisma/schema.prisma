generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "fullTextSearch", "fullTextIndex", "postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_email           String    @unique
  user_id              String    @id @default(uuid())
  user_name            String
  created_at           DateTime? @default(now()) @db.Timestamptz(6)
  billing_period_end   DateTime? @default(now()) @db.Timestamptz(6)
  billing_period_start DateTime? @default(now()) @db.Timestamptz(6)
  queries_in_period    Int?      @default(0)
  allowedqueries       Int?      @default(0)
}

model Retailer {
  retailer_id String @id @default(uuid())

  UltaProduct  UltaProduct[]
  UltaReview   UltaReview[]
  UltaReviewer UltaReviewer[]

  SephoraProduct  SephoraProduct[]
  SephoraReview   SephoraReview[]
  SephoraReviewer SephoraReviewer[]
}

model AllBrands {
  brand_id        String           @id @default(uuid())
  brand_name      String?
  created_at      DateTime         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime         @updatedAt @db.Timestamptz(6)
  UltaProduct     UltaProduct[]
  SephoraProduct  SephoraProduct[]
  SharedProduct   SharedProduct[]
}

model SharedProduct {
  id                        String   @id
  created_at                DateTime @default(now()) @db.Timestamptz(6)
  updated_at                DateTime @updatedAt @db.Timestamptz(6)
  similarity_score          Float
  brand_id                  String
  ulta_product_name         String
  sephora_product_name      String
  brand_name                String
  ulta_product_id           String
  sephora_product_id        String
  ulta_product_image_url    String[]
  sephora_product_image_url String[]
  ulta_avg_rating           Float
  sephora_avg_rating        Float
  ulta_total_reviews        Int
  sephora_total_reviews     Int
  ulta_sku_id               String
  sephora_sku_id            String
  ulta_product_price        Float[]
  sephora_product_price     Float[]
  ulta_page_link            String
  sephora_page_link         String

  allBrands       AllBrands      @relation(fields: [brand_id], references: [brand_id])
  ulta_product    UltaProduct    @relation(fields: [ulta_product_id], references: [product_id])
  sephora_product SephoraProduct @relation(fields: [sephora_product_id], references: [product_id])
}

model UltaProduct {
  product_id          String   @id @default(uuid())
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @updatedAt @db.Timestamptz(6)
  product_name        String
  product_image_url   String[]
  retailer_id         String
  brand_id            String
  brand_name          String
  review_histogram    Int[]
  product_price       Float[]
  sku_id              String
  avg_rating          Float
  total_reviews       Float
  page_link           String
  percent_recommended Int?

  retailer      Retailer        @relation(fields: [retailer_id], references: [retailer_id])
  brand         AllBrands       @relation(fields: [brand_id], references: [brand_id])
  UltaReview    UltaReview[]
  SharedProduct SharedProduct[]
}

model UltaReview {
  review_id       String      @id @default(uuid())
  product_id      String
  product         UltaProduct @relation(fields: [product_id], references: [product_id])
  retailer_id     String
  review_rating   Int?
  verified_buyer  Boolean?
  up_votes        Int?
  down_votes      Int?
  review_text     String?
  review_headline String?
  reviewer_id     String
  reviewer_name   String?
  review_date     DateTime?   @db.Timestamptz(6)

  retailer Retailer     @relation(fields: [retailer_id], references: [retailer_id], onDelete: Cascade)
  reviewer UltaReviewer @relation(fields: [reviewer_id], references: [reviewer_id])
}

model UltaReviewer {
  reviewer_id         String       @id @default(uuid())
  reviewer_name       String?
  Review              UltaReview[]
  Retailer            Retailer?    @relation(fields: [retailerRetailer_id], references: [retailer_id])
  retailerRetailer_id String?
}

model SephoraProduct {
  product_id          String   @id @default(uuid())
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @updatedAt @db.Timestamptz(6)
  product_name        String
  product_image_url   String[]
  retailer_id         String
  brand_id            String
  brand_name          String
  review_histogram    Int[]
  product_price       Float[]
  sku_id              String
  avg_rating          Float
  total_reviews       Float
  page_link           String
  percent_recommended Int?

  retailer      Retailer        @relation(fields: [retailer_id], references: [retailer_id])
  brand         AllBrands       @relation(fields: [brand_id], references: [brand_id])
  SephoraReview SephoraReview[]
  SharedProduct SharedProduct[]
}

model SephoraReview {
  review_id       String         @id @default(uuid())
  product_id      String
  product         SephoraProduct @relation(fields: [product_id], references: [product_id])
  retailer_id     String
  review_rating   Int?
  verified_buyer  Boolean?
  up_votes        Int?
  down_votes      Int?
  review_text     String?
  review_headline String?
  reviewer_id     String
  reviewer_name   String?
  review_date     DateTime?      @db.Timestamptz(6)

  retailer Retailer @relation(fields: [retailer_id], references: [retailer_id], onDelete: Cascade)

  SephoraReviewer SephoraReviewer? @relation(fields: [reviewer_id], references: [reviewer_id])
}

model SephoraReviewer {
  reviewer_id         String          @id @default(uuid())
  reviewer_name       String?
  Review              SephoraReview[]
  Retailer            Retailer?       @relation(fields: [retailerRetailer_id], references: [retailer_id])
  retailerRetailer_id String?
}

model ScrapeLog {
  scrape_id     String   @id @default(uuid())
  scrape_date   DateTime @default(now()) @db.Timestamptz(6)
  retailer      String?
  target        String?
  scrapeRange   String[]
  failedOn      String?
  executionTime Int?
}

// model Query {
//   query_id    String   @id @default(uuid())
//   created_at  DateTime @default(now()) @db.Timestamptz(6)
//   user_id     String
//   filters     String[]
//   product_id  String?
//   retailer_id String
//   retailer    Retailer @relation(fields: [retailer_id], references: [retailer_id])
//   queryBy     User     @relation(fields: [user_id], references: [user_id])
//   Review      Review[]
// }

// model SephoraProduct {
//   product_id          String      @id
//   price               Int?
//   avg_rating          Float?
//   percent_recommended Int?
//   product_name        String?
//   review_histogram    Int[]
//   sku_id              String?     @unique
//   total_reviews       Int?
//   brand_name          String?
//   brand               AllBrands   @relation(fields: [brand_id], references: [brand_id])
//   retailer_id         String
//   product             AllProducts @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
//   retailer            Retailer    @relation(fields: [retailer_id], references: [retailer_id])
//   queries             String[]    @default([""])
//   brand_id            String
// }

// model AllProducts {
//   product_id        String           @id @default(uuid())
//   created_at        DateTime?        @default(now()) @db.Timestamptz(6)
//   updated_at        DateTime?        @updatedAt @db.Timestamptz(6)
//   product_name      String?
//   product_image_url String[]
//   retailer          Retailer         @relation(fields: [retailer_id], references: [retailer_id])
//   retailer_id       String
//   brand             AllBrands        @relation(fields: [brand_id], references: [brand_id])
//   brand_id          String
//   brand_name        String?
//   product_price     Float[]
//   sku_id            String?
//   avg_rating        Float?
//   total_reviews     Float?
//   page_link         String?
//   UltaProduct       UltaProduct[]
//   SephoraProduct    SephoraProduct[]
//   Review            Review[]
// }
